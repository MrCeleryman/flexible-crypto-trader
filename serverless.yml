# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

plugins:
  - serverless-pseudo-parameters

service: flexible-crypto-trader # NOTE: update this with your service name
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x
  stage: default
  region: ap-southeast-2
  environment:
    BTC_MARKETS_KEY: ${self:custom.env.BTC_MARKETS_KEY}
    BTC_MARKETS_SECRET: ${self:custom.env.BTC_MARKETS_SECRET}
    COIN: ${self:custom.env.COIN}
    AUD_PURCHASE_AMOUNT: ${self:custom.env.AUD_PURCHASE_AMOUNT}
    MIN_PERCENTAGE_GAIN: ${self:custom.env.MIN_PERCENTAGE_GAIN}
    MAX_SPEND: ${self:custom.env.MAX_SPEND}
    LIVE: ${self:custom.env.LIVE}
    DB_TABLE_NAME: ${self:custom.env.DB_TABLE_NAME}
    MIN_AUD_IN_OPEN_TRADES: ${self:custom.env.MIN_AUD_IN_OPEN_TRADES}
    MAX_MINUTES_BETWEEN_TRADES: ${self:custom.env.MAX_MINUTES_BETWEEN_TRADES}
    DCA_PURCHASE_MAP: ${self:custom.env.DCA_PURCHASE_MAP}
    MODE: ${self:custom.env.MODE}
    EXCHANGE: ${self:custom.env.EXCHANGE}
    STRATEGY: ${self:custom.env.STRATEGY}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:Scan"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:Query"
        - "dynamodb:DescribeTable"
      Resource:
        - "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.env.DB_TABLE_NAME}"

custom:
  stage: ${opt:stage, self:provider.stage}
  env: ${file(env.yml):${self:custom.stage}}

# you can overwrite defaults here
#  stage: dev

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**


package:
  exclude: env.yml

functions:
  buy:
    handler: handler.buy
    memorySize: 256
    timeout: 15
    events:
      - schedule:
          rate: cron(${self:custom.env.BUY_CRON_SCHEDULE})
          enabled: ${self:custom.env.ENABLE_BUY}
  sell:
    handler: handler.sell
    memorySize: 256
    timeout: 15
    events:
      - schedule:
          rate: cron(${self:custom.env.SELL_CRON_SCHEDULE})
          enabled: ${self:custom.env.ENABLE_SELL}
  dca:
    handler: handler.dca
    events:
      - schedule:
          rate: cron(${self:custom.env.DCA_CRON_SCHEDULE})
          enabled: ${self:custom.env.ENABLE_DCA}

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    TradesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.env.DB_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        # Set the capacity based on the stage
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.env.TABLE_THROUGHPUT}
          WriteCapacityUnits: ${self:custom.env.TABLE_THROUGHPUT}
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
